const AWS = require('aws-sdk')
const dynamo = new AWS.DynamoDB.DocumentClient({ region: 'localhost', endpoint: 'http://host.docker.internal:8000' });

const table_name = 'test-table'

const query = async (KeyConditionExpression, ExpressionAttributeValues) => {
  return dynamo.query({
    TableName: table_name,
    KeyConditionExpression: KeyConditionExpression,
    ExpressionAttributeValues: ExpressionAttributeValues,
  }).promise();
}

const put = async (item) => {
  return dynamo.put({
    TableName: table_name,
    Item: item
  }).promise();
}

exports.after_school = {
  get_item: async (after_school_id) => {
    const response = await query('PK = :p_key AND SK = :s_key', {
      ':p_key': '#METADATA#AFTER_SCHOOL',
      ':s_key': 'AFTER_SCHOOL#' +  after_school_id
    })
    return response.Items ? response.Items[0] : {}
  }
}

exports.daily = {
  get_item: async (after_school_id, date) => {
    return await query('PK = :p_key AND SK = :s_key', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'DAILY#' + date,
    })
  },
  get_list: async (after_school_id, like_str) => {
    const response = await query('PK = :p_key AND begins_with(SK, :s_key)', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'DAILY#' + like_str,
    })
    return response.Items
  },
  put: async (after_school_id, date, open_type, childlen, disability, medical_care, open_instructor, close_instructor, details) => {
    return await put({
      PK: 'AFTER_SCHOOL#' +  after_school_id,
      SK: 'DAILY#' +  date,
      OpenType: open_type,
      Children: childlen,
      Disability: disability,
      MedicalCare: medical_care,
      OpenInstructor: open_instructor,
      CloseInstructor: close_instructor,
      Details: details,
    })
  }
}

exports.instructor = {
  get_item: async (after_school_id, instructor_id) => {
    const response = await query('PK = :p_key AND SK = :s_key', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'INSTRUCTOR#' + instructor_id,
    })
    return response.Items ? response.Items[0] : {}
  },
  get_all: async (after_school_id) => {
    return await query('PK = :p_key AND begins_with(SK, :s_key)', {
      ':p_key': 'AFTER_SCHOOL#' +  after_school_id,
      ':s_key': 'INSTRUCTOR#',
    })
  }
}